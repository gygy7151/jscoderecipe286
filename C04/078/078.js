// 원시타입과 객체타입의 처리를 이해하고 싶을때

// 데이터를 변수에서 변수로 전달시 값에 의한 전달과 참조에 의한 전달 방식 존재
// 자바스크립트의 원시 타입은 값에 의한 전달
// 객체 타입은 참조에 의한 전달 방식

// 다음 코드를 통해 값에 의한 전달 방식인 원시타입을 확인해보자

// 1. 변수 a에 100을 대입한다
const a = 100;

// 2. 변수 b에 변수 a를 대입한다. 변수 a에 대입한 값 100을 복사하여 변수 b에 전달한다.(값에 의한 전달)
const b = a;

// 3. 변수 a에 500을 대입한다.
const a = 500 (x)
a = 500;    //Uncaught typeError

a.value = 500;
// 500

// 4. 변수 b의 데이터는 변함없이 100이 출력된다.
console.log(b);     // 결과: 100

// let으로 값에 의한 전달
let a = 100;
//undefined
let b = a;
//undefined
a = 500;
//500
console.log(a);
//500
//undefined
console.log(b);
//100

// 참조를 통해 전달방식인 객체 타입을 확인해보자
// 변수 a에서 변수 b로 데이터를 전하면 데이터를 복사하는 것이 아닌 데이터가 저장된 메모리의 위치가 전달됨
// 결국 샘플의 a와 b는 같은 곳을 참조
// a[0]의 값이 바뀌면 b[0]의 값도 바뀜

// 1. 변수 a에 1,2,3을 참조하는 배열을 대입
let a = [1, 2, 3]
// 2. 변수 b에 변수 a를 대입한 후 변수 a에 저장된 배열의 참조 값이 변수 b에 전달(참조에 의한 전달)
let b = a;
// 3. 변수 a에 저장된 배열의 첫 번째 요소가 100을 참조
a[0] = 100;
// 4. 변수 b와 변수 a는 같은 배열을 참조하기 때문에 [100, 2, 3]이 출력
console.log(b); // 결과: [100, 2, 3]


// 함수의 인수 역시 원시 타입은 값, 객체 타입은 참조를 전달함
// 함수에  원시 타입의 데이터를 전달하는 코드예시
// 전달 받은 파라미터에 2를 더하는 함수
function myFunction(x) {
    x =  x + 2;
}

// 변수 a에 10 대입
let a = 10;

// myFunction()에 a를 전달
// 복사된 데이터 10을 함수에 전달
myFunction(a);

// 10이 출력(2가 더해진 12가 아님을 확인)
console.log(a); //결과:10

// 함수에 객체 타입의 데이터를 전달하는 코드예시
// 함수 내 처리 결과는 변수 a에 영향을 줌
// 전달받은 배열의 첫번째 요소에 100을 대입하는 함수
function myFunction(x) {
    x[0] = 100;
}

// 변수 a 에 [1, 2, 3]을 대입
let a = [1, 2, 3];

// myFunction()에 a를 전달
// 배열 데이터 [1, 2, 3] 메모리의 위치를 함수로 전달
myFunction(a);

// [100, 2, 3,]출력([1, 2, 3]이 아님을 확인)
console.log(a); // 결과: [100, 2, 3]


